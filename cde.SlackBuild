#!/bin/bash

# Slackware build script for cde

# Copyright 2023 Anagnostakis Ioannis GR Crete
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



cd "$(dirname "$0")" ; CWD=$(pwd)

PRGNAM=cde		# replace with name of program
VERSION=${VERSION:-2.5.1}	# replace with version of program
BUILD=${BUILD:-1}
TAG=${TAG:-_SCDE}		# the "_SBo" is required
PKGTYPE=${PKGTYPE:-tgz}
JOBS=-j$(nproc)
# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SCDE}	# For consistency's sake, use this
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}	# Drop the package in /tmp

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e # Exit on most errors
# If you prefer to do selective error checking with
#   command || exit 1
# then that's also acceptable.

rm -rf "$PKG"
mkdir -p "$TMP" "$PKG" "$OUTPUT"
cd "$TMP"
rm -rf $PRGNAM-"$VERSION"
tar -xf "$CWD"/$PRGNAM-"$VERSION".tar.gz
cd $PRGNAM-"$VERSION"
cd /tmp/SCDE/cde-2.5.1/
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

filename="cde.desktop"
Clear=Exec=/usr/dt/bin/Xsession
NOClear=Exec=/usr/bin/startcdesession.sh
# Optional patch not building docs... 
patch -Np1 -i "$CWD"/Makefile-am.patch
# Your application will probably need different configure flags;
# these are provided as an example only.
# Be sure to build only shared libraries unless there's some need for
# static.
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
# Compile the application and install it into the $PKG directory
./autogen.sh
# Escape from .la as deps. Libtools not building whitout this...lalalalala
patch -Np1 -i "$CWD"/configure.patch
./configure
make all WARNINGS_AS_ERRORS=y "$JOBS"
mkdir -p /etc/dt
sh contrib/desktop2dt/desktop2dt -i -a
#cp contrib/desktopentry/cde.desktop /usr/share/xsessions/
#sed -i "s/$Clear/$NOClear/" /usr/share/xsessions/$filename
cp -R contrib/ /etc/dt/
cp "$CWD"/startcdesession.sh /usr/bin/ 
chmod +x /usr/bin/startcdesession.sh
mkdir -p /usr/dt/config/xfonts/el_GR.UTF-8/
cp "$CWD"/fonts.dir /usr/dt/config/xfonts/el_GR.UTF-8/
cp "$CWD"/fonts.alias /usr/dt/config/xfonts/el_GR.UTF-8/
cp -R "$CWD"/xxkb /usr/share/
cp  "$CWD"/XXkb /etc/X11/app-defaults/XXkb
mkdir -p /etc/dt/appconfig/types/C/
cp "$CWD"/ltsp-usb.fp /etc/dt/appconfig/types/C/
mkdir -p /etc/dt/appconfig/icons/C/
cp -R "$CWD"/usb-icons /etc/dt/appconfig/icons/C/
echo 127.0.0.1  "$(hostname )"  /etc/hosts
echo echo ""$(ip addr show dev $(ip r | grep -oP 'default.*dev \K\S*') | grep -oP '(?<=inet )[^/]*(?=/)') $(hostname )""  /etc/hosts
rm -rf /var/dt/appconfig/appmanager/"$USER"-"$USER"-0
mkdir -p /var/dt/appconfig/appmanager/"$USER"-"$USER"-0
find /var/dt/appconfig/appmanager/ -depth -not -path "/var/dt/appconfig/appmanager/$USER-$USER-0" |sed '$ d' | while read line; do sudo ln -s "$line" "/var/dt/appconfig/appmanager/$USER-$USER-0" ; done
cp "$CWD"/cde.desktop /usr/share/xsessions/
make install DESTDIR="$PKG"

# Don't ship .la files:
rm -f "$PKG"/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Strip binaries and libraries - this can be done with 'make install-strip'
# in many source trees, and that's usually acceptable if so, but if not,
# use this:
find "$PKG" -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true


# Remove perllocal.pod and other special files that don't need to be installed,
# as they will overwrite what's already on the system.  If this is not needed,
# remove it from the script.
# Remove 'special' files
find "$PKG" -name perllocal.pod \
  -o -name ".packlist" \
  -o -name "*.bs" \
  | xargs rm -f

# Copy program documentation into the package
# The included documentation varies from one application to another, so be sure
# to adjust your script as needed
# Also, include the SlackBuild script in the documentation directory
mkdir -p "$PKG"/usr/doc/$PRGNAM-"$VERSION"
cp -a HISTORY COPYING CONTRIBUTORS README.md  \
  "$PKG"/usr/doc/$PRGNAM-"$VERSION"
cat "$CWD"/$PRGNAM.SlackBuild > "$PKG"/usr/doc/$PRGNAM-"$VERSION"/$PRGNAM.SlackBuild

# Copy the slack-desc (and a custom doinst.sh if necessary) into ./install
mkdir -p "$PKG"/install
cat "$CWD"/slack-desc > "$PKG"/install/slack-desc
cat "$CWD"/doinst.sh > "$PKG"/install/doinst.sh

# Make the package; be sure to leave it in $OUTPUT
# If package symlinks need to be created during install *before*
# your custom contents of doinst.sh runs, then add the -p switch to
# the makepkg command below -- see makepkg(8) for details
cd "$PKG"
/sbin/makepkg -l y -c n "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
